@import '../../../styles/base.scss';

.labeledInputWrapper {
  display: flex;
  align-items: baseline;

  label {
    width: 25%;
    color: $white;
  }

  input,
  input.inputStyles {
    padding: 10px;
    border: 2px solid $darkThree;
    background-color: $darkTwo;
    color: $secondaryBlack;
    font-size: 13px;
    border-radius: 0px;
    font-family: 'Poppins';
    caret-color: $white;

    &:not(:placeholder-shown) {
      /* You need to add a placeholder to your fields. For example: <input "placeholder=" "/> */
      @include inputStylesFor('hasValue');
    }

    &:focus {
      @include inputStylesFor('focus');
    }

    &:disabled {
      @include inputStylesFor('disabled');
    }
  }

  div.countryCodeBtn {
    background-color: $darkTwo;
    color: $white;

    :global(.country-list) {
      background-color: inherit;
      color: inherit;

      li {
        &:hover {
          background-color: $darkThree;
        }
      }
    }

    :global(.country.highlight) {
      background-color: $black;
    }

    :global(.selected-flag) {
      background-color: inherit !important;

      &:hover {
        background-color: inherit !important;
      }
    }

    &:hover {
      background-color: inherit;
    }
  }
}

.labeledDropdownWrapper {
  display: flex;
  align-items: baseline;
  flex: 1;

  &.columnWise {
    flex-direction: column;
    gap: 10px;
  }

  label {
    width: 25%;
    color: $white;
    display: flex;
  }
}

.labeledTextareaWrapper {
  display: flex;
  align-items: baseline;

  label {
    width: 25%;
  }

  textarea {
    resize: none;
    border: 2px solid $darkThree;
    background-color: #202222;
    color: var(--white);
    font-size: 13px;
    padding: 10px;
    font-family: 'Poppins';
    width: 100%;

    &:not(:placeholder-shown) {
      /* You need to add a placeholder to your fields. For example: <input "placeholder=" "/> */
      @include inputStylesFor('hasValue');
    }

    &:focus {
      @include inputStylesFor('focus');
    }

    &:disabled {
      @include inputStylesFor('disabled');
    }
  }
}

/* Customize the label (the container) */
.labeledRadioCheckboxWrapper {
  position: relative;
  padding-left: 35px;
  font-size: 14px;
  -webkit-user-select: none;
  -moz-user-select: none;
  -ms-user-select: none;
  user-select: none;
  label {
    cursor: pointer;
  }
  input {
    position: absolute;
    opacity: 0;
    cursor: pointer;
    height: 0;
    width: 0;

    &:disabled {
      @include inputStylesFor('disabled');
    }
  }

  /* Create a custom checkbox */
  .checkmark {
    position: absolute;
    top: 0;
    left: 0;
    height: 20px;
    width: 20px;
    background-color: $darkTwo;
    border: 1px solid $darkThree;

    &.loading {
      @include loader();
    }
  }

  /* Create the checkmark/indicator  */
  .checkmark:after {
    content: '';
    position: absolute;
    left: 5px;
    top: 1px;
    width: 5px;
    height: 10px;
    border: 2px solid $darkThree;
    border-width: 0 3px 3px 0;
    -webkit-transform: rotate(45deg);
    -ms-transform: rotate(45deg);
    transform: rotate(45deg);

    // (hidden when not checked)
    display: none;
  }

  // input[type='checkbox']:hover~.checkmark {
  //     border: 1px solid white;
  // }
  /* Show checkmark on checked */
  input[type='checkbox']:checked ~ .checkmark:after {
    display: block;
  }

  /* Create a custom radio button */
  .radiomark {
    position: absolute;
    top: 0;
    left: 0;
    height: 20px;
    width: 20px;
    border-radius: 50%;
    border: 2px solid $primary;
    background-color: transparent;
  }

  // input[type='radio']:hover~.radiomark {
  //     border: 2px solid white;
  // }
  /* Show radio selected on select */
  input[type='radio']:checked ~ .radiomark {
    background-color: $primary;
  }

  .disabled {
    border-color: $darkThree;
    cursor: not-allowed;
  }
}

.columnWise {
  flex-direction: column;
  gap: 0.5em;

  label {
    width: 100%;
    align-items: baseline;
  }
}

.disabledInput {
  border: 2px solid $darkThree;
}

.halfWidth {
  width: 50%;
}

.halfInputWrapper {
  width: 100%;

  label {
    width: 50%;
  }

  input {
    width: 50%;
  }
}

// upload button
.uploadBtnWrapper {
  width: 100%;
  position: relative;

  .btn {
    display: flex;
    justify-content: flex-start;
    align-items: center;

    padding: 4px 20px;

    border: 2px solid $secondaryBlack;
    border-radius: 3px;
    background-color: $darkTwo;

    color: $darkThree;
    font-size: 14px;
    font-family: 'Poppins';

    &.isActive {
      border-color: $primary;
    }

    img {
      width: 30px;
      margin: 5px 10px 5px 0;
    }
  }

  input[type='file'] {
    font-size: 10px;
    position: absolute;
    left: 0;
    top: 0;
    opacity: 0;

    height: 100%;
    width: 100%;

    &:disabled {
      @include inputStylesFor('disabled');
    }
  }

  .btnContainer {
    position: relative;
    height: 10px;

    display: flex;
    align-items: center;
    justify-content: space-between;

    padding-left: 10px;

    width: 100%;

    button {
      position: absolute;
      bottom: -10px;
      background: transparent;
      outline: transparent;
      border: transparent;
      cursor: pointer;
      font-weight: 600;

      &.preview {
        left: 0;
        color: $primary;
      }

      &.remove {
        right: 0;
        color: $secondaryBlack;
      }
    }
  }

  .progressBar {
    width: 100%;
    height: 5px;
    background-color: $darkOne;

    z-index: 1;

    .progressBarFill {
      height: 100%;
      background-color: rgba($primary, 0.8);
      border-radius: 5px;
    }
  }
}

//Range Slider

.rsliderContainer {
  width: 100%;
  position: relative;
  margin: 30px auto;
}

.rslider {
  -webkit-appearance: none;
  width: 100%;
  height: 10px;
  border-radius: 5px;
  background: rgb(105, 255, 93);
  background: linear-gradient(
    90deg,
    rgba(105, 255, 93, 1) 0%,
    rgba(59, 250, 56, 1) 10%,
    rgba(71, 218, 48, 1) 20%,
    rgba(56, 255, 0, 1) 30%,
    rgba(251, 255, 91, 1) 40%,
    rgba(239, 251, 35, 1) 50%,
    rgba(249, 255, 0, 1) 60%,
    rgba(251, 177, 0, 1) 70%,
    rgba(255, 83, 10, 1) 80%,
    rgba(255, 21, 21, 1) 90%,
    rgba(255, 0, 0, 1) 100%
  );
  outline: none;
  opacity: 0.7;
  -webkit-transition: 0.2s;
  transition: opacity 0.2s;
}

.rslider:hover {
  opacity: 1;
}

.rslider::-webkit-slider-thumb {
  -webkit-appearance: none;
  appearance: none;
  width: 15px;
  height: 15px;
  border-radius: 50%;
  position: relative;
  top: -6px;
  background: $darkThree;
  cursor: pointer;
}

.rslider::-moz-range-thumb {
  width: 15px;
  height: 15px;
  background: $darkThree;
  cursor: pointer;
}

.rsliderContainer {
  datalist {
    display: flex;
    justify-content: space-between;
    color: $white;
    width: 110%;

    option[label='10'] {
      left: -2px;
    }
  }
}

.timePicker {
  color: red !important;
}

.uploadForm {
  display: grid;
  grid-template-rows: 1fr 1fr;
  gap: 50px;

  .download {
    display: flex;
    align-items: center;
    gap: 40px;

    button {
      cursor: pointer;
      background-color: $primary;
      font-weight: 600;
      padding: 10px 20px;
      border: none;
      border-radius: 3px;
      outline: none;
    }
  }

  .upload {
    display: grid;
    grid-template-columns: auto 1fr;
    gap: 40px;
    align-items: center;
    position: relative;

    span {
      position: absolute;
      top: -20px;
      right: 0px;
      font-size: 13px;
      color: $darkThree;
    }
  }
}

// OtpINputField scss
.otp {
  padding: 0;
  margin: 0;
  border: 0;
  width: 20px;
  margin: 5px 10px;
  color: #ffffff;
  font-size: 27px;
  text-align: center;

  &:focus {
    padding: 0;
    border: 0;
    border-bottom: 3px solid $white;
    outline: 0;
    box-shadow: none;
  }

  &.value {
    width: 50px;
    border-bottom: 3px solid $secondaryBlack;
    background-color: transparent;
  }
}

.after {
  min-width: 80px;
  color: #ffffff;
  font-size: 17px;
  margin-left: 20px;
}

.rte {
  * {
    background-color: $darkTwo;
    color: $white;
    border: 0px;
    border-radius: 0px;
  }

  :global(.mantine-RichTextEditor-toolbarInner) {
    > div {
      margin: 0px;

      button {
        background-color: transparent;

        &:hover {
          background-color: transparent;
        }
      }
    }
  }
}

//Upload and preview
.uploadAndPreviewContainer {
  display: flex;
  align-items: center;

  label {
    color: $white;
  }

  .inputContainer {
    display: inherit;
    align-items: center;
    gap: 5px;

    button:nth-last-child(2) {
      color: $primary;
    }

    .btn {
      padding: 10px 16px;
      cursor: pointer;
      border: none;
      background-color: $primary;
      color: $black;
      border-radius: 3px;
      font-size: 0.875rem;
      // :hover {
      //   background-color: rgb(74, 144, 144);
      // }
    }

    .description {
      color: $bgBody;
      font-size: 12px;
    }

    .btn2 {
      cursor: pointer;
      border: none;
      background-color: transparent;
      color: $white;
      font-size: 0.85rem;
      // text-decoration: underline;
    }

    button[disabled] {
      color: $darkThree;
    }
  }
}

.searchInputContainer {
  position: relative;
  width: 100%;

  img {
    position: absolute;
    top: 50%;
    left: 5px;
    transform: translateY(-50%);
  }

  input {
    padding-left: 30px;
  }
}

.rteContainer {
  margin: 20px auto;
  position: relative;
  // min-height: 150px;
  // max-height: 250px;
  color: $white !important;

  .reactQuill {
    // min-height: 100px;
    // max-height: 300px;

    :global(.ql-active .ql-stroke) {
      stroke: $white !important;
    }

    :global(.ql-stroke) {
      stroke: $darkThree !important;
    }

    :global(.ql-active .ql-fill) {
      stroke: $white !important;
    }

    :global(.ql-fill) {
      fill: $darkThree !important;
    }

    :global(.ql-editor.ql-blank::before) {
      color: $darkThree !important;

      // :global(.ql-container.ql-snow),
      // :global(.ql-toolbar.ql-snow) {
      //   @include inputStylesFor('hasValue');
      // }

      // :global(.ql-toolbar.ql-snow) {
      //   border-bottom: 2px solid $darkThree;
      // }
      // :global(.ql-container.ql-snow) {
      //   border-top: 0px;
    }

    :global(.ql-snow) {
      color: $white !important;
    }

    :global(.ql-editor) {
      min-height: 100px !important;
    }
  }

  // &.hasValue {
  // }
  //   :global(.ql-container.ql-snow),
  //   :global(.ql-toolbar.ql-snow) {
  //     @include inputStylesFor('hasValue');
  //   }

  //   :global(.ql-toolbar.ql-snow) {
  //     border-bottom: 2px solid $darkThree;
  //   }
  //   :global(.ql-container.ql-snow) {
  //     border-top: 0px;
  //   }
  // }
}
.rteContainer2 {
  margin: 20px auto;
  position: relative;
  // min-height: 150px;
  // max-height: 250px;
  color: $white !important;

  .reactQuill {
    // min-height: 100px;
    // max-height: 300px;
    background-color: $secondary;
    :global(.ql-active .ql-stroke) {
      stroke: $white !important;
    }
    :global(.ql-stroke) {
      stroke: $darkThree !important;
    }

    :global(.ql-active .ql-fill) {
      stroke: $white !important;
    }

    :global(.ql-fill) {
      fill: $darkThree !important;
    }

    :global(.ql-editor.ql-blank::before) {
      color: $darkThree !important;

      // :global(.ql-container.ql-snow),
      // :global(.ql-toolbar.ql-snow) {
      //   @include inputStylesFor('hasValue');
      // }

      // :global(.ql-toolbar.ql-snow) {
      //   border-bottom: 2px solid $darkThree;
      // }
      // :global(.ql-container.ql-snow) {
      //   border-top: 0px;
    }

    :global(.ql-snow) {
      color: $white !important;
    }

    :global(.ql-editor) {
      min-height: 100px !important;
      max-height: 130px !important;
      margin-bottom: 60px;
    }
  }
}
.rteReadOnly {
  // margin: 20px auto;
  position: relative;
  // min-height: 150px;
  // max-height: 250px;
  color: $white !important;

  .reactQuill {
    // min-height: 100px;
    // max-height: 300px;
    background-color: transparent;

    :global(.ql-active .ql-stroke) {
      stroke: $white !important;
    }

    :global(.ql-stroke) {
      stroke: $darkThree !important;
    }

    :global(.ql-active .ql-fill) {
      stroke: $white !important;
    }

    :global(.ql-fill) {
      fill: $darkThree !important;
    }

    :global(.ql-editor.ql-blank::before) {
      color: $darkThree !important;

      // :global(.ql-container.ql-snow),
      // :global(.ql-toolbar.ql-snow) {
      //   @include inputStylesFor('hasValue');
      // }

      // :global(.ql-toolbar.ql-snow) {
      //   border-bottom: 2px solid $darkThree;
      // }
      // :global(.ql-container.ql-snow) {
      //   border-top: 0px;
    }

    :global(.ql-snow) {
      color: $white !important;
    }

    :global(.ql-editor) {
      padding: 0 !important;
    }
  }
}
.rteButtons {
  position: absolute;
  bottom: 8%;
  left: 1%;
  right: 0;
  width: 98%;
  display: flex;
  justify-content: space-between;
  align-items: center;
  color: $bgBody;
  gap: 10px;
  .post_type {
    display: flex;
    gap: 15px;
    p {
      font-size: 16px;
    }
  }
  .button_type {
    display: flex;
    gap: 15px;
    .button1,
    .buttonDisable {
      background: $primary;
      padding: 10px 24px;
      border-radius: 4px;
      border: none;
      cursor: pointer;
    }
    .buttonDisable {
      cursor: no-drop;
    }
    .button2 {
      color: #747474;
      padding: 10px 16px;
      background: transparent;
      border-radius: 4px;
      border: 1px solid $bgBody;
      cursor: pointer;
    }
  }
  .button_divider {
    border-left: 2px solid #5c5c5c;
    // height: 20px;
  }
}

.filePreview {
  height: 60vh;
  object-fit: contain;

  display: flex;
  justify-content: center;
  align-items: center;

  padding: 1em;
  overflow: auto hidden;

  img,
  video {
    height: 100%;
    // width: 100%;
    max-width: 100%;
  }

  .filePreviewFallBack {
    min-height: 50vh;
    display: flex;
    justify-content: center;
    align-items: center;
    flex-direction: column;

    p {
      color: $primary;
      font-weight: 600;
    }

    small {
      color: $darkThree;
    }
  }
}

.customReactSelectMenu {
  background-color: $black;
  display: flex;
  flex-direction: column;
  justify-content: center;
  align-items: center;
}

.addNewTrainerButton {
  background-color: red;
}
