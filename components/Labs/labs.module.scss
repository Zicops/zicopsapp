@import '../../styles/base.scss';

$cellHeightWidth: 35px;
$cellDefaultColor: $bgTile;
$blockedColor: $secondary;
$roomColor: $bgBody;
$doorColor: $secondaryWhite;

.pacmanContainer {
  display: flex;
  justify-content: space-between;
  align-items: center;
  height: 75vh;
  margin: 50px 30px;
}

// controls
.controls {
  display: flex;
  flex-direction: column;
  justify-content: space-evenly;
  height: 100%;

  .arrowContainer {
    display: grid;
    grid-template-columns: repeat(3, 1fr);
    grid-gap: 5px;

    & > div:first-child {
      grid-column: 1/4;
      margin: auto;
    }

    .arrowBtn {
      border: 2px solid $darkThree;
      color: $secondaryBlack;
      padding: 10px;
      width: fit-content;

      &:hover,
      &.activeBtn {
        color: $black;
        background: $primary;
        border-color: transparent;
      }
    }
  }

  .enterLabBtn {
    text-align: center;

    button {
      display: flex;
      justify-content: center;
      background-color: $primary;
      padding: 10px;
      width: 100%;

      border: none;
      outline: none;
      margin: 10px auto;
      cursor: pointer;

      &:disabled {
        background-color: $secondaryWhite;
        cursor: no-drop;
      }
    }

    button:disabled ~ span {
      color: $secondaryWhite;
    }

    span {
      color: $white;
      font-weight: 600;
    }

    svg {
      font-size: 2rem;
      transform: rotate(180deg);
    }
  }
}

// board
.board {
  position: relative;
  right: 0;
  display: grid;
  color: $white;
  border: 5px solid $primary;

  .row {
    grid-column-start: 1;
    display: flex;
  }

  .cell {
    height: $cellHeightWidth;
    width: $cellHeightWidth;
    background-color: $cellDefaultColor;
    // border: 1px solid $darkThree;
  }

  .edgeCell {
    outline: 6px solid $cellDefaultColor;
  }

  .path {
    position: relative;
    z-index: 0;

    &::before {
      content: '';
      height: 5px;
      width: 5px;
      background-color: $primary;
      border-radius: 100%;

      position: absolute;
      top: 50%;
      left: 50%;
      transform: translate(-50%, -50%);
      z-index: 1;
    }
  }

  // https://stackoverflow.com/questions/58031534/one-background-image-divided-in-multiple-divs
  // https://stackoverflow.com/questions/67323858/divide-a-single-image-background-acrross-multiple-divs-with-different-heights
  // https://stackoverflow.com/questions/18768453/way-to-divide-a-single-background-image-across-multiple-divs-to-create-windowed
  .blocked {
    background-color: $blockedColor;
    z-index: 1;
  }

  .room {
    background-color: $roomColor;
  }

  .roomDoor {
    background-color: $doorColor;
  }

  .imgContainer {
    position: relative;
    z-index: 2;

    .container {
      position: relative;
      height: calc($cellHeightWidth * 3);
      width: calc($cellHeightWidth * 4);

      left: calc($cellHeightWidth * -2);

      &.longImg {
        height: calc($cellHeightWidth * 3);
        width: calc($cellHeightWidth * 5);

        left: calc($cellHeightWidth * -3);
      }

      &.fromBottom {
        top: calc($cellHeightWidth * -2);
      }
    }

    .overlay {
      position: absolute;

      height: 100%;
      width: 100%;

      opacity: 0;
      background-color: $primary;
      transition: 0.5s ease;
    }

    img.fromBottom ~ .overlay {
      top: calc($cellHeightWidth * -2);
    }

    img {
      position: absolute;
      top: 0px;
      height: 100%;
      width: 100%;
    }
  }

  .activeRoom .overlay,
  .container:hover .overlay {
    opacity: 1;
  }
}

// yellow spirit
$diff: 10px;
$side: calc($cellHeightWidth - $diff);
.pacman {
  width: calc($cellHeightWidth - $diff);
  height: calc($cellHeightWidth - $diff);
  margin: calc($diff / 2);
  border-radius: 50%;
  background: yellow;

  position: absolute;
  top: 0px;
  left: 0px;

  transition: left 200ms ease-out, top 200ms ease-out;
  z-index: 10;

  // https://codepen.io/wilman/pen/KKjOQR
  -webkit-clip-path: polygon(
    0 0,
    $side 0,
    $side -1 * $side/4,
    $side/3 $side/2,
    $side $side + $side/4,
    $side $side,
    0 $side
  );

  &.animate {
    -webkit-animation: chew 0.6s linear forwards infinite;
  }

  &.up {
    transform: rotate(270deg);
  }
  &.down {
    transform: rotate(90deg);
  }
  &.left {
    transform: rotate(180deg);
  }
  &.right {
    transform: rotate(0deg);
  }

  // &::before {
  //   content: '';
  //   height: calc(($cellHeightWidth / 2) - ($diff / 2));
  //   width: calc(($cellHeightWidth / 2) - ($diff / 2));
  //   background-color: $cellDefaultColor;
  //   border-top-left-radius: 100%;

  //   position: absolute;
  //   top: -1px;
  //   left: -1px;

  //   // animation: pac 200ms infinite;
  // }
}

@-webkit-keyframes chew {
  50% {
    -webkit-clip-path: polygon(
      0 0,
      $side 0,
      $side $side/2,
      $side/3 $side/2,
      $side $side/2,
      $side $side,
      0 $side
    );
  }
}

@keyframes pac {
  from {
    height: calc(($cellHeightWidth / 2) - ($diff / 2));
  }
  to {
    height: calc(($cellHeightWidth) - ($diff));
  }
}
